
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

/**
 * Store information for purchase links.
 */
export const Store = z.object({
  id: LimitedString.default(null),
  name: LimitedString.default(null),
  storefront_url: LimitedString.default(null),
  storefront_affiliate_link: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  logo: LimitedString.default(null),
  ships_from: z.union([
    z.array(CountryCode),
    CountryCode,
  ]).default(null),
  ships_to: z.union([
    z.array(CountryCode),
    CountryCode,
  ]).default(null),
}).strict();
export type StoreType = z.infer<typeof Store>;

/**
 * Brand/manufacturer information.
 */
export const Brand = z.object({
  brand: LimitedString.default(null),
  website: LimitedString.default(null),
  logo: LimitedString.default(null),
  origin: CountryCode.default(null),
}).strict();
export type BrandType = z.infer<typeof Brand>;

/**
 * Generic slicer settings that map to specific slicer configurations.
 */
export const GenericSlicerSettings = z.object({
  first_layer_bed_temp: z.union([
    z.number().int(),
    z.null(),
  ]).default(null),
  first_layer_nozzle_temp: z.union([
    z.number().int(),
    z.null(),
  ]).default(null),
  bed_temp: z.union([
    z.number().int(),
    z.null(),
  ]).default(null),
  nozzle_temp: z.union([
    z.number().int(),
    z.null(),
  ]).default(null),
}).strict();
export type GenericSlicerSettingsType = z.infer<typeof GenericSlicerSettings>;

/**
 * Settings for a specific slicer application.
 */
export const SpecificSlicerSettings = z.object({
  profile_name: LimitedString.default(null),
  overrides: z.union([
    z.record(z.string(), z.union([
      z.string(),
      z.array(z.string()),
    ])),
    z.null(),
  ]).default(null),
}).strict();
export type SpecificSlicerSettingsType = z.infer<typeof SpecificSlicerSettings>;

/**
 * Settings for various slicer applications.
 */
export const SlicerSettings = z.object({
  prusaslicer: z.union([
    SpecificSlicerSettings,
    z.null(),
  ]).default(null),
  bambustudio: z.union([
    SpecificSlicerSettings,
    z.null(),
  ]).default(null),
  orcaslicer: z.union([
    SpecificSlicerSettings,
    z.null(),
  ]).default(null),
  cura: z.union([
    SpecificSlicerSettings,
    z.null(),
  ]).default(null),
  generic: z.union([
    GenericSlicerSettings,
    z.null(),
  ]).default(null),
}).strict();
export type SlicerSettingsType = z.infer<typeof SlicerSettings>;

/**
 * Material type information.
 */
export const Material = z.object({
  material: LimitedString.default(null),
  default_max_dry_temperature: z.union([
    z.number().int(),
    z.null(),
  ]).default(null),
  default_slicer_settings: z.union([
    SlicerSettings,
    z.null(),
  ]).default(null),
}).strict();
export type MaterialType = z.infer<typeof Material>;

/**
 * Slicer-specific IDs for the filament.
 */
export const SlicerIDs = z.object({
  prusaslicer: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  bambustudio: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  orcaslicer: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  cura: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
}).strict();
export type SlicerIDsType = z.infer<typeof SlicerIDs>;

/**
 * Filament product line information.
 */
export const Filament = z.object({
  name: LimitedString.default(null),
  diameter_tolerance: z.number().default(null),
  density: z.number().default(null),
  max_dry_temperature: z.union([
    z.number().int(),
    z.null(),
  ]).default(null),
  data_sheet_url: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  safety_sheet_url: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  discontinued: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
  slicer_ids: z.union([
    SlicerIDs,
    z.null(),
  ]).default(null),
  slicer_settings: z.union([
    SlicerSettings,
    z.null(),
  ]).default(null),
}).strict();
export type FilamentType = z.infer<typeof Filament>;

/**
 * Standard color system identifiers.
 */
export const ColorStandards = z.object({
  ral: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  ncs: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  pantone: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  bs: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  munsell: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
}).strict();
export type ColorStandardsType = z.infer<typeof ColorStandards>;

/**
 * Physical and environmental traits of the filament.
 */
export const Traits = z.object({
  translucent: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
  glow: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
  matte: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
  recycled: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
  recyclable: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
  biodegradable: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
}).strict();
export type TraitsType = z.infer<typeof Traits>;

/**
 * Color variant of a filament.
 */
export const Variant = z.object({
  color_name: LimitedString.default(null),
  color_hex: Colors.default(null),
  hex_variants: z.union([
    z.array(Color),
    z.null(),
  ]).default(null),
  discontinued: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
  color_standards: z.union([
    ColorStandards,
    z.null(),
  ]).default(null),
  traits: z.union([
    Traits,
    z.null(),
  ]).default(null),
}).strict();
export type VariantType = z.infer<typeof Variant>;

/**
 * Purchase link for a specific size.
 */
export const PurchaseLink = z.object({
  store_id: LimitedString,
  url: LimitedString,
  affiliate: z.boolean(),
  spool_refill: z.boolean().default(null),
  ships_from: z.union([
    z.union([
      z.array(CountryCode),
      CountryCode,
    ]),
    z.null(),
  ]).default(null),
  ships_to: z.union([
    z.union([
      z.array(CountryCode),
      CountryCode,
    ]),
    z.null(),
  ]).default(null),
}).strict();
export type PurchaseLinkType = z.infer<typeof PurchaseLink>;

/**
 * Size/weight variant of a filament color.
 */
export const FilamentSize = z.object({
  filament_weight: z.number().default(null),
  diameter: z.number().default(null),
  empty_spool_weight: z.union([
    z.number(),
    z.null(),
  ]).default(null),
  spool_core_diameter: z.union([
    z.number(),
    z.null(),
  ]).default(null),
  ean: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  article_number: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  barcode_identifier: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  nfc_identifier: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  qr_identifier: z.union([
    LimitedString,
    z.null(),
  ]).default(null),
  discontinued: z.union([
    z.boolean(),
    z.null(),
  ]).default(null),
  purchase_links: z.union([
    z.array(PurchaseLink),
    z.null(),
  ]).default(null),
}).strict();
export type FilamentSizeType = z.infer<typeof FilamentSize>;
